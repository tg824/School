Bantam Java Compiler Project
Base Language Version 1.3
  Changes from 1.2:
    * Added installation package using Ant (rather than make)
    * Added JVM target for generating Java Virtual Machine Code,
      which can be converted by Jasmin into class files
    * Added an optimizer component for optimizing programs
      (the opt/ and cfg/ packages contain this code)
    * Added an interpreter component for interpreting programs
    * String.equals now takes an Object as a parameter
      (as it does in Java)
    * Added Object.toString, Object.equals, Sys.time, and 
      Sys.random built-in methods
    * Symbol table is no longer flushed after semantic analysis
      and can be used by code generator
    * Fixed other minor bugs in solution, API, and manual
  Changes from 1.1:
    * Made String.equals parameter type Object rather than String to
      conform with Java's definition of String.equals
    * Added an extended language (includes arrays, for loops, etc.)
    * Fully implemented lexer in JavaCC version of reference compiler
      (lexical errors caught in lexer rather than in parser -- thanks
       to David Furcy for identifying this and providing solution code)
    * Fixed off by one conformance testing bug in reference compiler
    * Fixed difference in language between Bantam Java and Java:
      Bantam Java now does not allow redeclaration of local variables
      with overlapping scopes
    * Fixed other minor bugs in solution, API, and manual

Contents:
  src - contains source code for the bantam compiler
        (contents shown below)
  api - contains the documentation (html) of the API
  bin - contains scripts for running the compiler and the
        documentation generator
  lib - contains library code needed by the compiler and other tools
  man - contains a man page for the bantam compiler
  tools - contains auxiliary tools for the bantam compiler
  tests - contains bantam test programs
  Makefile - a makefile for compiling the source (using a 
	     Makefile in src/) and generating the documentation
	     (using a script in bin/)

api contents:
  html/ (after making): contains html code compiled from
    javadoc, which describes the bantam compiler API
  Makefile: a Makefile for compiling the API

src contents: 
  src contains bantam and bantam-jj.  bantam uses JLex and 
    Java Cup while bantam-jj uses JavaCC.  You will want to
    implement the compiler from one of these directories 
    (but probably not both).

  bantam - contains the bantam compiler for the base language (uses JLex/Java Cup):
           Makefile - a Makefile for compiling the source
	   Main.java - the main program for the compiler
	   lexer - a package containing the lexer:
	           lexer.jlex - lexer specification (incomplete)
		   Token.java - token passed from lexer to parser
	           *.ref - reference class files (contain working code)
	   parser - a package containing the parser:
	            parser.cup - parser specification (incomplete)
		    TokenIds.java - generated class containing token ids
	            *.ref - reference class files (contain working code)
	   semant - a package containing the semantic analyzer
                    SemanticAnalyzer.java - semantic analyzer (incomplete)
	            *.ref - reference class files (contain working code)
	   interp - a package containing the interpreter
                    Interpreter.java - interpreter (incomplete)
	            *.ref - reference class files (contain working code)
	   opt - a package containing the optimizer
                    Optimizer.java - optimizer (incomplete)
	            *.ref - reference class files (contain working code)
           codegenjvm - a package containing the code generator
		     	 CodeGenerator.java - JVM code generator (incomplete)
			 *.ref - reference class files (contain working code)
           codegenmips - a package containing the code generator
		     	 CodeGenerator.java - MIPS code generator (incomplete)
		         MipsSupport.java - a support file that provides 
                           architectural support for the Mips ISA
			 *.ref - reference class files (contain working code)
           codegenx86 - a package containing the code generator
		     	CodeGenerator.java - Mips code generator (incomplete)
		        X86Support.java - a support file that provides 
                          architectural support for the x86 ISA
			*.ref - reference class files (contain working code)
           ast - a package containing the AST classes
                 *.java - each class in this directory represents a node in the
		   AST (illustrated in the ASTNode class)
	   cfg - a package containing the control flow graph (CFG) classes
                 (needed for optimization)
	         *.java - each class in this directory represents a node in 
                 the CFG
           util - a package containing some utilties
	          SymbolTable.java - a class representing a scoped symbol table
		    (maps Strings to Objects, which may represent type, location, etc.)
		  Location.java - a class representing a variable location
		    in memory or a register
                  ErrorHandler.java - a class for handling error reporting and exiting
		  ClassTreeNode.java - class for generating node the class hierarchy tree
           visitor - a package containing visitor classes
	             Visitor.java - abstract visitor class that other visitors extend
		     PrintVisitor.java - a subclass of Visitor that prints the AST
  bantam-jj - contains the bantam compiler for the base language (uses JavaCC):
           Makefile - a Makefile for compiling the source
	   Main.java - the main program for the compiler
	   lexer - a package containing the lexer:
	           lexer.jj - lexer specification (incomplete)
	           *.ref - reference class files (contain working code)
	   parser - a package containing the parser:
	            parser.jj - parser specification (incomplete)
	            *.ref - reference class files (contain working code)
	   semant - same as above
	   interp - same as above
           opt - same as above
           codegenjvm - same as above
           codegenmips - same as above
           codegenx86 - same as above
           ast - same as above
	   cfg - same as above
           util - same as above
           visitor - same as above

bin contents:
  (note: initially empty, files added after making)
  bantamc - shell script for running compiler
  bantamc-ref - shell script for running reference JLex/Java Cup compiler
  bantamc-jj-ref - shell script for running reference JavaCC compiler
  => src Makefiles expect shell scripts for running JLex, Java Cup, and
     JavaCC to reside in here

lib contents:
  (note: initially empty, files added after making)
  bantamc-ref.jar - jar file containing reference JLex/Java Cup compiler
  bantamc-jj-ref.jar - jar file containing reference JavaCC compiler
  exceptions.s - SPIM trap handler file, must use this file to run
    assembly files compiled by the bantam compiler  
  runtime.s - x86 runtime system (32-bit), must link with this file
    (e.g., with gcc) to run assembly files compiled by the bantam compiler
  TextIO.class - part of JVM runtime system (handles TextIO builtin class),
    need to include in the class path when running classes compiled by the
    bantam compiler
  Sys.class - part of JVM runtime system (handles Sys builtin class)
    need to include in the class path when running classes compiled by the
    bantam compiler
  => src Makefiles expect links to JLex and Java Cup to reside in here

man contents:
  man1/bantamc.1 - man page for the bantam compiler

tools contents:
  lib - contains library code needed for building the reference compiler
    and also the runtime system code for the MIPS/SPIM, x86/Linux, and
    JVM targets
  => can build auxiliary tools in this directory, in fact, this is where
    they will eventually be built.  they were left out for copyright
    reasons

tests contents:
  *.btm - Several bantam programs for testing out the bantam compiler
  Makefile - a makefile for building the bantam programs, change the
    variable BTMC to change the compiler (and use reference compiler),
    change the variable TARG to change the compiler target (set to
    either 'mips', 'x86' or 'jvm'), change variable FLAGS to change 
    other compiler flags (can add garbage collection, optimization, etc.)

To make the source code for the compiler, the documentation, the auxiliary tools,
or the Bantam test programs (i.e., compile them with the compiler built by 
making the source code) simply type 'make'.  You will need to modify the 
PROJPATH macro in the Makefile and set it the path where you installed the 
files (i.e., the path to the directory containing this README).  You will 
need java/javac/javadoc installed and in your path.  You will also need 
JLex, Java Cup, JavaCC, and SPIM installed.  You will have to edit paths in 
the Makefiles to find these tools.  For JLex and Java Cup look at the paths
assigned to variables in src/bantam/Makefile.  For JavaCC look at the paths
assigned to variables in src/bantam-jj/Makefile.  For SPIM look at the paths
assigned to variables in tools/Makefile.

Note that 'make' will not only build the auxiliary tools, build the Bantam 
Java compiler, and build the API, but also attempt to compile the test programs
in the tests/ directory.  Because the compiler is unimplemented this part of the
build process will fail initially (although it should not once the compiler has
been implemented).  However, 'make' should fail only at this point and not
at any point before.  In particular, although the compiler is unimplemented,
it should still build properly.
 
To learn more about the Bantam Java language or compiler, read the Bantam Compiler
Project Lab manual available at http://www.bantamjava.com/.

Have fun!!!
